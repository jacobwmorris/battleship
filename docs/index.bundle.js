(()=>{var t={426:(t,e,n)=>{"use strict";n.d(e,{Z:()=>g});var s=n(537),r=n.n(s),i=n(645),o=n.n(i),a=n(667),h=n.n(a),p=new URL(n(314),n.b),u=new URL(n(937),n.b),c=new URL(n(765),n.b),l=o()(r()),d=h()(p),m=h()(u),A=h()(c);l.push([t.id,"* {\n    margin: 0;\n    padding: 0;\n}\n\n/* Overall layout */\n#content {\n    width: 800px;\n    margin: 0 auto;\n}\n\nh1 {\n    text-align: center;\n}\n\n.mainbutton {\n    display: block;\n    padding: 4px;\n    width: 8rem;\n    margin: 1rem auto;\n}\n\n.nodisplay {\n    display: none;\n}\n\n.redtext {\n    color: red;\n}\n\n.bluetext {\n    color: blue;\n}\n\n/* New game form */\n#ng-form {\n    border: 2px solid gray;\n}\n\n#ng-form ul {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    list-style-type: none;\n}\n\nlabel {\n    display: inline-block;\n    margin: 1rem 0;\n}\n\n#start {\n    display: block;\n    padding: 4px;\n    margin: 1rem;\n}\n\n/* Layout for gameboards */\n.battleship-main {\n    display: flex;\n    justify-content: space-between;\n}\n\n.boardwrapper {\n    width: 264px;\n    height: 264px;\n    flex: none;\n}\n\n/* Player titles */\n.playername {\n    text-decoration: underline;\n    text-align: center;\n}\n\n/* Gameboard */\n.gameboard {\n    margin: 24px 0 0 24px;\n}\n\n.gameboard, .coordinates, .boardsquares, .hitmarks, .targetbuttons {\n    position: relative;\n}\n\n.coordinates > div, .boardsquares > div, .hitmarks > div, .targetbuttons > button {\n    width: 24px;\n    height: 24px;\n    position: absolute;\n}\n\n.coord {\n    font-family: 'Courier New', Courier, monospace;\n    font-size: 1rem;\n    text-align: center;\n    padding: 0.2rem 0;\n}\n\n.watersquare {\n    background-color: #0069ff\n}\n\n.watersquare-dark {\n    background-color: #0052c8;\n}\n\n.shipsquare {\n    background-color: #c4c4c4;\n}\n\n.markhit, .markmiss {\n    background-color: transparent;\n}\n\n.markhit {\n    background-image: url("+d+");\n}\n\n.markmiss {\n    background-image: url("+m+");\n}\n\n.target {\n    border: 0;\n    background-color: transparent;\n}\n\n.target:focus-visible {\n    border: 0;\n    outline: 0;\n}\n\n.enabletargets .target:not(.used):hover {\n    background-image: url("+A+");\n}\n\n/* Message section */\n#messages {\n    overflow: scroll;\n    width: 50%;\n    height: 10rem;\n    margin: 0 auto;\n    border: 2px solid gray;\n}\n\n/* Ship placement */\n.followmouse {\n    position: absolute;\n    transform: translate(-50%, -50%);\n    height: 24px;\n    width: 24px;\n    background-color: transparent;\n    pointer-events: none;\n}\n\n.ship-placer {\n    position: absolute;\n    background-color: #c4c4c4;\n    pointer-events: none;\n    opacity: 0.5;\n}\n\n.rot90 {\n    transform: rotate(90deg);\n}\n\n.rot180 {\n    transform: rotate(180deg);\n}\n\n.rot270 {\n    transform: rotate(270deg);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA,mBAAmB;AACnB;IACI,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,WAAW;AACf;;AAEA,kBAAkB;AAClB;IACI,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,qBAAqB;IACrB,cAAc;AAClB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,YAAY;AAChB;;AAEA,0BAA0B;AAC1B;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,UAAU;AACd;;AAEA,kBAAkB;AAClB;IACI,0BAA0B;IAC1B,kBAAkB;AACtB;;AAEA,cAAc;AACd;IACI,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,8CAA8C;IAC9C,eAAe;IACf,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI;AACJ;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,yDAA4C;AAChD;;AAEA;IACI,yDAA6C;AACjD;;AAEA;IACI,SAAS;IACT,6BAA6B;AACjC;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,yDAAgD;AACpD;;AAEA,oBAAoB;AACpB;IACI,gBAAgB;IAChB,UAAU;IACV,aAAa;IACb,cAAc;IACd,sBAAsB;AAC1B;;AAEA,mBAAmB;AACnB;IACI,kBAAkB;IAClB,gCAAgC;IAChC,YAAY;IACZ,WAAW;IACX,6BAA6B;IAC7B,oBAAoB;AACxB;;AAEA;IACI,kBAAkB;IAClB,yBAAyB;IACzB,oBAAoB;IACpB,YAAY;AAChB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B",sourcesContent:['* {\n    margin: 0;\n    padding: 0;\n}\n\n/* Overall layout */\n#content {\n    width: 800px;\n    margin: 0 auto;\n}\n\nh1 {\n    text-align: center;\n}\n\n.mainbutton {\n    display: block;\n    padding: 4px;\n    width: 8rem;\n    margin: 1rem auto;\n}\n\n.nodisplay {\n    display: none;\n}\n\n.redtext {\n    color: red;\n}\n\n.bluetext {\n    color: blue;\n}\n\n/* New game form */\n#ng-form {\n    border: 2px solid gray;\n}\n\n#ng-form ul {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    list-style-type: none;\n}\n\nlabel {\n    display: inline-block;\n    margin: 1rem 0;\n}\n\n#start {\n    display: block;\n    padding: 4px;\n    margin: 1rem;\n}\n\n/* Layout for gameboards */\n.battleship-main {\n    display: flex;\n    justify-content: space-between;\n}\n\n.boardwrapper {\n    width: 264px;\n    height: 264px;\n    flex: none;\n}\n\n/* Player titles */\n.playername {\n    text-decoration: underline;\n    text-align: center;\n}\n\n/* Gameboard */\n.gameboard {\n    margin: 24px 0 0 24px;\n}\n\n.gameboard, .coordinates, .boardsquares, .hitmarks, .targetbuttons {\n    position: relative;\n}\n\n.coordinates > div, .boardsquares > div, .hitmarks > div, .targetbuttons > button {\n    width: 24px;\n    height: 24px;\n    position: absolute;\n}\n\n.coord {\n    font-family: \'Courier New\', Courier, monospace;\n    font-size: 1rem;\n    text-align: center;\n    padding: 0.2rem 0;\n}\n\n.watersquare {\n    background-color: #0069ff\n}\n\n.watersquare-dark {\n    background-color: #0052c8;\n}\n\n.shipsquare {\n    background-color: #c4c4c4;\n}\n\n.markhit, .markmiss {\n    background-color: transparent;\n}\n\n.markhit {\n    background-image: url("../images/x-hit.svg");\n}\n\n.markmiss {\n    background-image: url("../images/x-miss.svg");\n}\n\n.target {\n    border: 0;\n    background-color: transparent;\n}\n\n.target:focus-visible {\n    border: 0;\n    outline: 0;\n}\n\n.enabletargets .target:not(.used):hover {\n    background-image: url("../images/crosshair.svg");\n}\n\n/* Message section */\n#messages {\n    overflow: scroll;\n    width: 50%;\n    height: 10rem;\n    margin: 0 auto;\n    border: 2px solid gray;\n}\n\n/* Ship placement */\n.followmouse {\n    position: absolute;\n    transform: translate(-50%, -50%);\n    height: 24px;\n    width: 24px;\n    background-color: transparent;\n    pointer-events: none;\n}\n\n.ship-placer {\n    position: absolute;\n    background-color: #c4c4c4;\n    pointer-events: none;\n    opacity: 0.5;\n}\n\n.rot90 {\n    transform: rotate(90deg);\n}\n\n.rot180 {\n    transform: rotate(180deg);\n}\n\n.rot270 {\n    transform: rotate(270deg);\n}\n'],sourceRoot:""}]);const g=l},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",s=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),s&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),s&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,s,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(s)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var p=0;p<t.length;p++){var u=[].concat(t[p]);s&&o[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),e.push(u))}},e}},667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),i="/*# ".concat(r," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,s=0;s<e.length;s++)if(e[s].identifier===t){n=s;break}return n}function s(t,s){for(var i={},o=[],a=0;a<t.length;a++){var h=t[a],p=s.base?h[0]+s.base:h[0],u=i[p]||0,c="".concat(p," ").concat(u);i[p]=u+1;var l=n(c),d={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==l)e[l].references++,e[l].updater(d);else{var m=r(d,s);s.byIndex=a,e.splice(a,0,{identifier:c,updater:m,references:1})}o.push(c)}return o}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var i=s(t=t||[],r=r||{});return function(t){t=t||[];for(var o=0;o<i.length;o++){var a=n(i[o]);e[a].references--}for(var h=s(t,r),p=0;p<i.length;p++){var u=n(i[p]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=h}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var s=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var s="";n.supports&&(s+="@supports (".concat(n.supports,") {")),n.media&&(s+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(s+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),s+=n.css,r&&(s+="}"),n.media&&(s+="}"),n.supports&&(s+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(s,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},705:(t,e,n)=>{const s=n(262),r=n(959),i=n(691);function o(t,e){this.element=t,this.squareSize=e}o.prototype.setup=function(t){s.clearChildren(this.element);const e=this.makeMainArea(t),n=this.makePassButton(t.getPassCallback());this.element.appendChild(e),this.element.appendChild(n),this.setTargetsEnabled(t)},o.prototype.update=function(t){const e=this.element.querySelector(".p1 .boardsquares"),n=this.element.querySelector(".p2 .boardsquares"),s=this.element.querySelector(".p1 .hitmarks"),r=this.element.querySelector(".p2 .hitmarks");e.parentElement.replaceChild(this.makeBoardSquares(t.board1),e),n.parentElement.replaceChild(this.makeBoardSquares(t.board2),n),s.parentElement.replaceChild(this.makeHitMarks(t.board1),s),r.parentElement.replaceChild(this.makeHitMarks(t.board2),r),this.setTargetsEnabled(t),this.setPassText(t),this.resetUsedButtons(t)},o.prototype.makeMainArea=function(t){const e=s.makeElement("div","","battleship-main"),n=this.makeBoardWrapper(t.player1,t.board1,t.getTargetCallback(1)),r=this.makeBoardWrapper(t.player2,t.board2,t.getTargetCallback(2));return e.appendChild(n),e.appendChild(r),e},o.prototype.makePassButton=function(t){const e=s.makeElement("button","Pass",["mainbutton","passbutton"]);return e.addEventListener("click",t),e},o.prototype.setPassText=function(t){/pass/.test(t.mode)?this.element.querySelector(".passbutton").textContent="Done passing":this.element.querySelector(".passbutton").textContent="Pass"},o.prototype.makeBoardWrapper=function(t,e,n){const r=s.makeElement("div","",["boardwrapper",1===t.num?"p1":"p2"]),i=this.makePlayerName(t),o=this.makeGameboard(e,n);return r.appendChild(i),r.appendChild(o),r},o.prototype.makePlayerName=function(t){const e=s.makeElement("h2",t.name,"playername");return e.classList.add(1===t.num?"redtext":"bluetext"),e},o.prototype.makeGameboard=function(t,e){const n=s.makeElement("div","","gameboard"),r=this.makeCoordinates(t),i=this.makeBoardSquares(t),o=this.makeHitMarks(t),a=this.makeTargetButtons(t,e);return n.appendChild(r),n.appendChild(i),n.appendChild(o),n.appendChild(a),n},o.prototype.makeCoordinates=function(t){const e=s.makeElement("div","","coordinates");for(let n=0;n<t.width;n++)e.appendChild(this.makeCoordSquare("x",n));for(let n=0;n<t.height;n++)e.appendChild(this.makeCoordSquare("y",n));return e},o.prototype.makeCoordSquare=function(t,e){let n=0,r=0;text="x"===t?i.numToLetter(e):(e+1).toString(),"x"===t?(n=e*this.squareSize,r=-this.squareSize):(n=-this.squareSize,r=e*this.squareSize);const o=s.makeElement("div",text,"coord");return o.setAttribute("style",`left:${n}px;top:${r}px;`),o},o.prototype.makeBoardSquares=function(t){const e=s.makeElement("div","","boardsquares"),n=t.getShipSquares();for(let s=0;s<t.height;s++)for(let r=0;r<t.width;r++)e.appendChild(this.makeBoardSquare(r,s,t.hidden,n));return e},o.prototype.makeBoardSquare=function(t,e,n,i){const o=t*this.squareSize,a=e*this.squareSize,h=s.makeElement("div","","");if(h.setAttribute("style",`left:${o}px;top:${a}px;`),n)return h.classList.add("watersquare-dark"),h;let p=!1;return void 0!==i.find((n=>r.equal(n,[t,e])))&&(p=!0),h.classList.add(p?"shipsquare":"watersquare"),h},o.prototype.makeHitMarks=function(t){const e=s.makeElement("div","","hitmarks");return t.shots.forEach((t=>{e.appendChild(this.makeHitMark(t.pos[0],t.pos[1],t.hit))})),e},o.prototype.makeHitMark=function(t,e,n){const r=s.makeElement("div","",n?"markhit":"markmiss"),i=t*this.squareSize,o=e*this.squareSize;return r.setAttribute("style",`left:${i}px;top:${o}px;`),r},o.prototype.makeTargetButtons=function(t,e){const n=s.makeElement("div","","targetbuttons");for(let s=0;s<t.height;s++)for(let r=0;r<t.width;r++)n.appendChild(this.makeTargetButton(r,s,e));return n},o.prototype.makeTargetButton=function(t,e,n){const r=t*this.squareSize,i=e*this.squareSize,o=s.makeElement("button","","target");return o.setAttribute("style",`left:${r}px;top:${i}px;`),o.setAttribute("data-x",t),o.setAttribute("data-y",e),o.addEventListener("click",n),o},o.prototype.setTargetsEnabled=function(t){const e=this.element.querySelector(".p1"),n=this.element.querySelector(".p2");/setup/.test(t.mode)?1===t.whosTurn?(e.classList.add("enabletargets"),n.classList.remove("enabletargets")):(e.classList.remove("enabletargets"),n.classList.add("enabletargets")):1===t.whosTurn?(e.classList.remove("enabletargets"),n.classList.add("enabletargets")):(e.classList.add("enabletargets"),n.classList.remove("enabletargets"))},o.prototype.resetUsedButtons=function(t){t.resetButtons&&(document.querySelectorAll(".target").forEach((t=>t.classList.remove("used"))),t.resetbuttons=!1)},t.exports=o},262:t=>{const e={clearChildren:function(t){for(;t.children.length;)t.removeChild(t.lastChild)},makeElement:function(t,e,n){const s=document.createElement(t);if(e&&(s.textContent=e),n)if(Array.isArray(n))for(const t of n)t&&s.classList.add(t);else s.classList.add(n);return s}};t.exports=e},325:(t,e,n)=>{const s=n(884),r=n(959);function i(){this.hidden=!1,this.ships=[],this.shots=[]}i.prototype.width=10,i.prototype.height=10,i.prototype.reset=function(){this.ships.splice(0,this.ships.length),this.shots.splice(0,this.shots.length)},i.prototype.place=function(t,e,n,r){const i=new s(t,e,n,r);if(!this.shipInBounds(i))throw new Error("Tried to place a ship out of bounds");this.ships.forEach((t=>{if(this.shipsOverlap(t,i))throw new Error("Tried to place one ship overlaping another")})),this.ships.push(i)},i.prototype.placeRandom=function(t,e,n,s){let r=(s=s||this.getRandShipPosition)(),i=!1;for(let o=0;o<n;o++){try{this.place(t,r.pos,e,r.direction)}catch(t){r=s();continue}i=!0;break}return i},i.prototype.receiveAttack=function(t){if(void 0!==this.shots.find((e=>r.equal(e.pos,t))))throw new Error("Tried to attack the same square again");let e={hit:!1,hitShip:null,sunk:!1};return this.ships.forEach((n=>{this.shotHits(t,n)&&(n.hit(),e.hit=!0,e.hitShip=n,e.sunk=n.isSunk())})),this.shots.push({pos:t,hit:e.hit}),e},i.prototype.dryFire=function(t){let e={legal:!0,hit:!1,hitShip:null,sunk:!1};return e.legal=r.inBounds(t,[0,0],[this.width,this.height]),void 0!==this.shots.find((e=>r.equal(e.pos,t)))&&(e.legal=!1),this.ships.forEach((n=>{this.shotHits(t,n)&&(e.hit=!0,e.hitShip=n,e.sunk=n.wouldBeSunk())})),e},i.prototype.allShipsSunk=function(){return!this.ships.find((t=>!t.isSunk()))},i.prototype.getShipSquares=function(){const t=[];return this.ships.forEach((e=>t.push(e.getSquares()))),t.flat(1)},i.prototype.shipInBounds=function(t){const e=t.pos,n=t.getStern();return r.inBounds(e,[0,0],[this.width,this.height])&&r.inBounds(n,[0,0],[this.width,this.height])},i.prototype.shipsOverlap=function(t,e){let n=t.pos,s=t.getStern(),r=e.pos,i=e.getStern();if(n[0]>s[0]||n[1]>s[1]){const t=n;n=s,s=t}if(r[0]>i[0]||r[1]>i[1]){const t=r;r=i,i=t}return s[0]>=r[0]&&n[0]<=i[0]&&s[1]>=r[1]&&n[1]<=i[1]},i.prototype.shotHits=function(t,e){return!!e.getSquares().find((e=>r.equal(e,t)))},i.prototype.getRandShipPosition=function(){return{pos:[Math.floor(10*Math.random()),Math.floor(10*Math.random())],direction:[[1,0],[0,1],[-1,0],[0,-1]][Math.floor(4*Math.random())]}},t.exports=i},590:(t,e,n)=>{const s=n(325),r=n(62),i=n(520),o=n(691);function a(){this.mode="pvc",this.resetButtons=!1,this.whosTurn=1,this.player1=new r("Player 1",1,!1),this.player2=new r("Player 2 (cpu)",2,!0),this.board1=new s,this.board2=new s,this.observers=[],this.messages=null,this.shipPlacer=new i}a.prototype.setup=function(t,e,n,s,r,i){this.mode=1===t?"pvc-setup":"pvp-setup",this.whosTurn=1,this.player1.reset(e,1,!1),this.player2.reset(n,2,1===t),this.board1.reset(),this.board2.reset(),this.board1.hidden=!1,this.board2.hidden=!0,s.setup(this),this.observers.push(s),this.messages=r,this.messages.clear(),this.shipPlacer.registerCursor(i),this.beginShipPlacement()},a.prototype.setupTEST=function(t,e,n,s,r,i){this.mode=1===t?"pvc-setup":"pvp-setup",this.whosTurn=1,this.player1.reset(e,1,!1),this.player2.reset(n,2,1===t),this.board1.reset(),this.board2.reset(),s.setup(this),this.observers.push(s),this.messages=r,this.messages.clear(),this.shipPlacer.registerCursor(i),this.beginShipPlacement()},a.prototype.update=function(t){let e=!1;switch(this.mode){case"pvc-setup":e=this.updatePvCSetup(t);break;case"pvc":e=this.updatePvC(t);break;case"pvp-setup":e=this.updatePvPSetup(t);break;case"pvp":e=this.updatePvP(t)}return e},a.prototype.pass=function(){switch(this.mode){case"turnover-setup":this.passSetup();break;case"pass-setup":this.passFinishSetup();break;case"turnover":this.passTurn();break;case"pass":this.passFinish()}},a.prototype.finishGame=function(t){const e=1===t.num?this.player2:this.player1;this.messages.receiveMessage(`All of ${e.name}'s ships are sunk. ${this.getRandomConsolation()}`),this.messages.receiveMessage(`The winner is ${t.name}!`,t.num),this.board1.hidden=!1,this.board2.hidden=!1,this.notifyObservers(this),this.mode="gameover"},a.prototype.notifyObservers=function(t){this.observers.forEach((e=>e.update(t)))},a.prototype.getTargetCallback=function(t){const e=this;return function(n){if(n.target.classList.contains("used"))return;const s=[Number.parseInt(n.target.getAttribute("data-x")),Number.parseInt(n.target.getAttribute("data-y"))];e.update({boardNum:t,pos:s})&&n.target.classList.add("used")}},a.prototype.getPassCallback=function(){const t=this;return function(e){t.pass()}},a.prototype.updatePvCSetup=function(t){const e=1===t.boardNum?this.player1:this.player2;let n=!1;return n=this.doPlayerPlace(e,t.pos),!!n&&(this.shipPlacer.endPlace(),this.shipPlacer.next>=5&&1===this.whosTurn?(this.doCpuPlace(),this.messages.receiveMessage("Setup is complete.  Let the game begin!"),this.mode="pvc",this.notifyObservers(this),!1):(this.shipPlacer.placeNext(),this.messages.receiveMessage(`${e.name}, place your ${this.shipPlacer.ship.name}.`,e.num),this.notifyObservers(this),!1))},a.prototype.doPlayerPlace=function(t,e){let n=!1;const s=1===t.num?this.board1:this.board2;if(t.num===this.whosTurn){const t=this.shipPlacer.ship;try{s.place(t.name,e,t.length,t.direction)}catch(t){return this.messages.receiveMessage("Error: "+t.message),n}n=!0}return n},a.prototype.doCpuPlace=function(){let t=!0;t=t&&this.board2.placeRandom("carrier",5,50),t=t&&this.board2.placeRandom("battleship",4,50),t=t&&this.board2.placeRandom("cruiser",3,50),t=t&&this.board2.placeRandom("submarine",3,50),t=t&&this.board2.placeRandom("destroyer",2,50),t?this.messages.receiveMessage(`${this.player2.name} has placed their ships.`,this.player2.num):this.messages.receiveMessage(`Note: ${this.player2.name} was unable to place all of their ships.`)},a.prototype.updatePvC=function(t){const e=1===t.boardNum?this.player2:this.player1;let n=!1;return n=this.doPlayerAttack(1,e,t.pos),n?this.board2.allShipsSunk()?(this.finishGame(this.player1),n):(this.doCpuAttack(),this.board1.allShipsSunk()?(this.finishGame(this.player2),n):(this.notifyObservers(this),n)):n},a.prototype.doPlayerAttack=function(t,e,n){let s=!1;const r=1===t?this.board2:this.board1;if(e.num===t&&this.whosTurn===t){let t;try{t=r.receiveAttack(n)}catch(t){return this.messages.receiveMessage("Error:"+t.message),s}this.messages.receiveMessage(`${e.name} fires on square (${o.numToLetter(n[0])}, ${n[1]+1}).  The shot ${t.hit?"hits!":"misses."}`,e.num),t.sunk&&this.messages.receiveMessage(`The opponent's ${t.hitShip.name} is sunk!`,e.num),s=!0}return s},a.prototype.doCpuAttack=function(){let t;const e=this.player2.cpuTurn(this.board1);try{t=this.board1.receiveAttack(e.pos)}catch(t){return void this.messages.receiveMessage("Error:"+t.message)}this.messages.receiveMessage(`${e.player.name} fires on square (${o.numToLetter(e.pos[0])}, ${e.pos[1]+1}).  The shot ${t.hit?"hits!":"misses."}`,e.player.num),t.sunk&&this.messages.receiveMessage(`The opponent's ${t.hitShip.name} is sunk!`,e.player.num)},a.prototype.updatePvP=function(t){let e=!1;const n=1===t.boardNum?this.player2:this.player1,s=1===t.boardNum?this.board1:this.board2;if(n.num===this.whosTurn&&(e=this.doPlayerAttack(this.whosTurn,n,t.pos)),e)return s.allShipsSunk()?(this.finishGame(n),e):(this.endTurn(),this.notifyObservers(this),e)},a.prototype.endTurn=function(){const t=1===this.whosTurn?this.player2:this.player1;this.messages.receiveMessage(`Pass to ${t.name}`,this.whosTurn),this.mode="turnover"},a.prototype.passTurn=function(){this.board1.hidden=!0,this.board2.hidden=!0,1===this.whosTurn?this.whosTurn=2:this.whosTurn=1,this.mode="pass",this.notifyObservers(this)},a.prototype.passFinish=function(){1===this.whosTurn?(this.board1.hidden=!1,this.board2.hidden=!0):(this.board1.hidden=!0,this.board2.hidden=!1),this.mode="pvp",this.notifyObservers(this)},a.prototype.updatePvPSetup=function(t){const e=1===t.boardNum?this.player1:this.player2;let n=!1;return n=this.doPlayerPlace(e,t.pos),!!n&&(this.shipPlacer.endPlace(),this.shipPlacer.next>=5?(this.endSetupTurn(),void this.notifyObservers(this)):(this.shipPlacer.placeNext(),this.messages.receiveMessage(`${e.name}, place your ${this.shipPlacer.ship.name}.`,e.num),this.notifyObservers(this),!1))},a.prototype.endSetupTurn=function(){const t=1===this.whosTurn?this.player2:this.player1;this.messages.receiveMessage(`Your ships are placed, pass to ${t.name}`,this.whosTurn),this.shipPlacer.reset(),this.mode="turnover-setup"},a.prototype.passSetup=function(){this.board1.hidden=!0,this.board2.hidden=!0,1===this.whosTurn?this.whosTurn=2:this.whosTurn=1,this.mode="pass-setup",this.notifyObservers(this)},a.prototype.passFinishSetup=function(){if(1===this.whosTurn?(this.board1.hidden=!1,this.board2.hidden=!0):(this.board1.hidden=!0,this.board2.hidden=!1),this.board1.ships.length>=5&&this.board2.ships.length>=5)return this.mode="pvp",this.messages.receiveMessage("Setup is complete.  Let the game begin!"),void this.notifyObservers(this);this.mode="pvp-setup",this.shipPlacer.placeNext(),this.notifyObservers(this)},a.prototype.getRandomConsolation=function(){const t=["Bummer!","Oh, well!","Sucks to be them!","Better luck next time!","Gosh dern it to heck!","Shoot!","Too bad!","Well, ship happens, right?","I guess you could say, their ship has sailed!","Have fun in Davy Jones's locker!"];return t[Math.floor(Math.random()*t.length)]},a.prototype.beginShipPlacement=function(){this.whosTurn=1,this.shipPlacer.reset(),this.shipPlacer.placeNext(),this.messages.receiveMessage("Click on your board to place your ship.  You can press R to rotate it."),this.messages.receiveMessage(`${this.player1.name}, place your ${this.shipPlacer.ship.name}.`,this.whosTurn)},t.exports=a},192:(t,e,n)=>{const s=n(262);function r(t){this.element=t}r.prototype.receiveMessage=function(t,e){let n;if(e){const r=1===e?"redtext":"bluetext";n=s.makeElement("p",t,r),this.element.appendChild(n)}else n=s.makeElement("p",t),this.element.appendChild(n);this.element.scrollTop+=n.scrollHeight},r.prototype.clear=function(){s.clearChildren(this.element)},t.exports=r},691:t=>{const e={numToLetter:function(t){const e="A".charCodeAt(0);return String.fromCharCode(e+t)}};t.exports=e},62:(t,e,n)=>{const s=n(959),r=n(952);function i(t,e,n){this.name=t,this.num=e,this.isCpu=n,this.guessGenerator=null,n&&(this.guessGenerator=new r(this.guessRandom))}i.prototype.reset=function(t,e,n){this.name=t,this.num=e,this.isCpu=n,this.guessGenerator=null,n&&(this.guessGenerator=new r(this.guessRandom))},i.prototype.cpuTurn=function(t){const e={player:this};if(null===this.guessGenerator)return e.pos=this.guessRandom(t),e;try{e.pos=this.guessGenerator.guess(t)}catch(n){this.guessGenerator.reset(),e.pos=this.guessGenerator.guess(t)}return e},i.prototype.guessRandom=function(t){const e=[];for(let n=0;n<t.height;n++)for(let r=0;r<t.width;r++){const i=[r,n];void 0===t.shots.find((t=>s.equal(t.pos,i)))&&e.push(i)}return e[Math.floor(Math.random()*e.length)]},t.exports=i},884:(t,e,n)=>{const s=n(959);function r(t,e,n,s){this.name=t,this.pos=e,this.length=n,this.direction=s,this.hits=0}r.prototype.hit=function(){this.hits++},r.prototype.isSunk=function(){return this.hits>=this.length},r.prototype.wouldBeSunk=function(){return this.hits+1>=this.length},r.prototype.getStern=function(){const t=this.length<=0?0:this.length-1;return s.add(this.pos,s.multiply(this.direction,t))},r.prototype.getSquares=function(){let t=this.pos;const e=[];for(let n=0;n<this.length;n++)e.push(t),t=s.add(t,this.direction);return e},t.exports=r},520:(t,e,n)=>{const s=n(884),r=n(959);function i(){this.placing=!1,this.next=0,this.ship=this.shipList[0],this.observers=[]}i.prototype.shipList=[new s("carrier",[0,0],5,[1,0]),new s("battleship",[0,0],4,[1,0]),new s("cruiser",[0,0],3,[1,0]),new s("submarine",[0,0],3,[1,0]),new s("destroyer",[0,0],2,[1,0])],i.prototype.reset=function(){this.placing=!1,this.next=0,this.resetRotations(),this.ship=this.shipList[0],this.notifyObservers({destroy:!0})},i.prototype.resetRotations=function(){this.shipList.forEach((t=>t.direction=[1,0]))},i.prototype.placeNext=function(){this.placing||(this.placing=!0,this.ship=this.shipList[this.next],this.next+=1,this.notifyObservers({setup:!0,length:this.ship.length,direction:this.ship.direction}))},i.prototype.endPlace=function(){this.placing&&(this.placing=!1,this.notifyObservers({destroy:!0}))},i.prototype.rotateRight=function(){this.ship.direction=r.rotateRight(this.ship.direction),this.notifyObservers({length:this.ship.length,direction:this.ship.direction})},i.prototype.rotateLeft=function(){this.ship.direction=r.rotateLeft(this.ship.direction)},i.prototype.registerCursor=function(t){t.setupRotationCb(this),void 0===this.observers.find((e=>t===e))&&this.observers.push(t)},i.prototype.notifyObservers=function(t){this.observers.forEach((e=>e.update(t)))},t.exports=i},484:(t,e,n)=>{const s=n(262),r=n(959);function i(t){this.cursor=null,this.squareSize=t,this.rotationIsSetup=!1}i.prototype.directionClasses={r:"",d:"rot90",l:"rot180",u:"rot270"},i.prototype.setupPlacer=function(){const t=document.querySelector("body");this.cursor=s.makeElement("div","","followmouse"),t.addEventListener("mousemove",this.followMouseCb),t.appendChild(this.cursor)},i.prototype.destroyPlacer=function(){if(null===this.cursor)return;const t=document.querySelector("body");t.removeEventListener("mousemove",this.followMouseCb),t.removeChild(this.cursor),this.cursor=null},i.prototype.update=function(t){if(t.setup&&this.setupPlacer(),t.destroy)return void this.destroyPlacer();s.clearChildren(this.cursor);const e=s.makeElement("div","",["ship-placer",this.directionClasses[r.getDirection(t.direction)]]),n=this.squareSize/2+"px";e.setAttribute("style",`height:${this.squareSize}px;width:${this.squareSize*t.length}px;transform-origin:${n} ${n};`),this.cursor.appendChild(e)},i.prototype.followMouseCb=function(t){const e=document.querySelector(".followmouse"),n=t.pageX+"px",s=t.pageY+"px";e.style.left=n,e.style.top=s},i.prototype.setupRotationCb=function(t){this.rotationIsSetup||(window.addEventListener("keydown",(function(e){"KeyR"===e.code&&t.placing&&t.rotateRight()})),this.rotationIsSetup=!0)},t.exports=i},952:(t,e,n)=>{const s=n(959);function r(t){this.mode="rand",this.randomGuesser=t,this.hit=[0,0],this.direction=[1,0],this.distance=2}r.prototype.guess=function(t){switch(this.mode){case"rand":return this.rand(t,0);case"surround":return this.surround(t,0);case"trace":return this.trace(t,0);default:return[0,0]}},r.prototype.reset=function(){this.mode="rand",this.hit=[0,0],this.direction=[1,0],this.distance=2},r.prototype.rand=function(t,e){if(e>5)throw new Error("Failed to find a random square");const n=this.randomGuesser(t),s=t.dryFire(n);return s.legal?(s.hit&&this.randFoundShip(n),n):this.rand(t,e+1)},r.prototype.randFoundShip=function(t){this.hit=t,this.direction=[1,0],this.mode="surround"},r.prototype.surround=function(t,e){if(e>=4)throw new Error("No legal squares surrounding hit position");const n=s.add(this.hit,this.direction),r=t.dryFire(n);return r.legal?(r.hit?r.sunk?this.sunkShip():this.surroundFoundDirection():this.direction=s.rotateRight(this.direction),n):(this.direction=s.rotateRight(this.direction),this.surround(t,e+1))},r.prototype.sunkShip=function(){this.mode="rand"},r.prototype.surroundFoundDirection=function(){this.distance=2,this.mode="trace"},r.prototype.trace=function(t,e){if(e>=2)throw new Error("No legal squares on either side while tracing a ship");const n=s.add(this.hit,s.multiply(this.direction,this.distance)),r=t.dryFire(n);return r.legal?(r.hit?r.sunk?this.sunkShip():this.distance+=1:(this.direction=s.multiply(this.direction,-1),this.distance=1),n):(this.direction=s.multiply(this.direction,-1),this.distance=1,this.trace(t,e+1))},t.exports=r},959:t=>{t.exports={equal:function(t,e){return t[0]===e[0]&&t[1]===e[1]},add:function(t,e){return[t[0]+e[0],t[1]+e[1]]},multiply:function(t,e){return[t[0]*e,t[1]*e]},inBounds:function(t,e,n){return t[0]>=e[0]&&t[0]<n[0]&&t[1]>=e[1]&&t[1]<n[1]},rotateRight:function(t){return this.removeNegativeZero([-t[1],t[0]])},rotateLeft:function(t){return this.removeNegativeZero([t[1],-t[0]])},removeNegativeZero:function(t){return t.map((t=>-0===t?0:t))},getDirection:function(t){if(0===t[0]){if(t[1]>0)return"d";if(t[1]<0)return"u"}if(0===t[1]){if(t[0]>0)return"r";if(t[0]<0)return"l"}return"unknown"}}},765:(t,e,n)=>{"use strict";t.exports=n.p+"a90310215b7c6992e774.svg"},314:(t,e,n)=>{"use strict";t.exports=n.p+"fb6a31836089c8482360.svg"},937:(t,e,n)=>{"use strict";t.exports=n.p+"5af967069e9b251e4e8e.svg"}},e={};function n(s){var r=e[s];if(void 0!==r)return r.exports;var i=e[s]={id:s,exports:{}};return t[s](i,i.exports,n),i.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var s=e.getElementsByTagName("script");s.length&&(t=s[s.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{"use strict";var t=n(379),e=n.n(t),s=n(795),r=n.n(s),i=n(569),o=n.n(i),a=n(565),h=n.n(a),p=n(216),u=n.n(p),c=n(589),l=n.n(c),d=n(426),m={};m.styleTagTransform=l(),m.setAttributes=h(),m.insert=o().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=u(),e()(d.Z,m),d.Z&&d.Z.locals&&d.Z.locals;const A=n(590),g=n(705),f=n(192),y=n(484),b=new g(document.getElementById("battleship"),24),v=new y(24),C=new f(document.getElementById("messages")),k=new A;document.getElementById("newgame").addEventListener("click",(function(t){const e=document.getElementById("ng-form");e.classList.contains("nodisplay")?e.classList.remove("nodisplay"):e.classList.add("nodisplay")})),document.getElementById("start").addEventListener("click",(function(t){t.preventDefault();const e=document.getElementById("ng-mode").value,n=document.getElementById("ng-p1name").value||"Player 1",s=document.getElementById("ng-p2name").value||"Player 2";k.setup("pvc"===e?1:2,n,s,b,C,v),document.getElementById("ng-form").classList.add("nodisplay")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,